/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CoinFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "generateCoin" | "getCoin" | "list"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "createdCoin"): EventFragment;

  encodeFunctionData(
    functionFragment: "generateCoin",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getCoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "list", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "generateCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
}

export namespace createdCoinEvent {
  export type InputTuple = [adresse: AddressLike, name: string, symbol: string];
  export type OutputTuple = [adresse: string, name: string, symbol: string];
  export interface OutputObject {
    adresse: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CoinFactory extends BaseContract {
  connect(runner?: ContractRunner | null): CoinFactory;
  waitForDeployment(): Promise<this>;

  interface: CoinFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  generateCoin: TypedContractMethod<
    [name: string, symbol: string],
    [void],
    "nonpayable"
  >;

  getCoin: TypedContractMethod<[], [string[]], "view">;

  list: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "generateCoin"
  ): TypedContractMethod<[name: string, symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCoin"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "createdCoin"
  ): TypedContractEvent<
    createdCoinEvent.InputTuple,
    createdCoinEvent.OutputTuple,
    createdCoinEvent.OutputObject
  >;

  filters: {
    "createdCoin(address,string,string)": TypedContractEvent<
      createdCoinEvent.InputTuple,
      createdCoinEvent.OutputTuple,
      createdCoinEvent.OutputObject
    >;
    createdCoin: TypedContractEvent<
      createdCoinEvent.InputTuple,
      createdCoinEvent.OutputTuple,
      createdCoinEvent.OutputObject
    >;
  };
}
