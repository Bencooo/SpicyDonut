/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface NFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "generateNFT"
      | "getAlreadyListed"
      | "getIdMarket"
      | "getNFT"
      | "getNFTNameById"
      | "idMarket"
      | "list"
      | "market"
      | "sell"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Debug" | "createdNFT"): EventFragment;

  encodeFunctionData(
    functionFragment: "generateNFT",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAlreadyListed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNFTNameById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "idMarket", values?: undefined): string;
  encodeFunctionData(functionFragment: "list", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "market",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "generateNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAlreadyListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTNameById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
}

export namespace DebugEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace createdNFTEvent {
  export type InputTuple = [adresse: AddressLike, name: string, symbol: string];
  export type OutputTuple = [adresse: string, name: string, symbol: string];
  export interface OutputObject {
    adresse: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NFTFactory;
  waitForDeployment(): Promise<this>;

  interface: NFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  generateNFT: TypedContractMethod<
    [name: string, symbol: string],
    [void],
    "nonpayable"
  >;

  getAlreadyListed: TypedContractMethod<
    [collection: AddressLike],
    [boolean],
    "view"
  >;

  getIdMarket: TypedContractMethod<[], [bigint], "view">;

  getNFT: TypedContractMethod<[], [string[]], "view">;

  getNFTNameById: TypedContractMethod<[id: BigNumberish], [string], "view">;

  idMarket: TypedContractMethod<[], [bigint], "view">;

  list: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  market: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        price: bigint;
        seller: string;
        collection: string;
        timestamp: bigint;
        locked: boolean;
      }
    ],
    "view"
  >;

  sell: TypedContractMethod<
    [price: BigNumberish, collection: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "generateNFT"
  ): TypedContractMethod<[name: string, symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAlreadyListed"
  ): TypedContractMethod<[collection: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getIdMarket"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNFT"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNFTNameById"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "idMarket"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        price: bigint;
        seller: string;
        collection: string;
        timestamp: bigint;
        locked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [price: BigNumberish, collection: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "createdNFT"
  ): TypedContractEvent<
    createdNFTEvent.InputTuple,
    createdNFTEvent.OutputTuple,
    createdNFTEvent.OutputObject
  >;

  filters: {
    "Debug(string)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "createdNFT(address,string,string)": TypedContractEvent<
      createdNFTEvent.InputTuple,
      createdNFTEvent.OutputTuple,
      createdNFTEvent.OutputObject
    >;
    createdNFT: TypedContractEvent<
      createdNFTEvent.InputTuple,
      createdNFTEvent.OutputTuple,
      createdNFTEvent.OutputObject
    >;
  };
}
